-- MySQL dump 10.13  Distrib 5.5.44, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: sachin_wiki
-- ------------------------------------------------------
-- Server version	5.5.44-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wiki_catalog`
--

DROP TABLE IF EXISTS `wiki_catalog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wiki_catalog` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `wiki_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'wiki id',
  `article_title` varchar(255) NOT NULL DEFAULT '' COMMENT '文章标题',
  `article_author` varchar(20) NOT NULL DEFAULT '' COMMENT '文章作者',
  `parent_wiki_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父文章wiki_id',
  `create_time` datetime NOT NULL DEFAULT '1970-01-01 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_wiki_id` (`wiki_id`),
  KEY `idx_article_title` (`article_title`(191))
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='wiki文章目录表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wiki_catalog`
--

LOCK TABLES `wiki_catalog` WRITE;
/*!40000 ALTER TABLE `wiki_catalog` DISABLE KEYS */;
INSERT INTO `wiki_catalog` VALUES (1,97131505,'argus','',0,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(2,100248364,'自助处罚','',97131505,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(3,100248367,'酒店上下线管理','',100248364,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(4,100036031,'常用接口地址','',97131505,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(5,100039275,'团购反作弊','',97131505,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(6,97131509,'点评反作弊','',97131505,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(7,100039273,'qta反作弊','',97131505,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(8,99769907,'qta订单同步','',100039273,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(9,100794613,'qta订单同步新算法','',100039273,'2017-03-12 21:54:25','2017-03-12 14:11:40'),(10,98578544,'qta同步监控报警处理','',100039273,'2017-03-12 21:54:25','2017-03-12 14:11:40');
/*!40000 ALTER TABLE `wiki_catalog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wiki_content`
--

DROP TABLE IF EXISTS `wiki_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wiki_content` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `wiki_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'wiki id',
  `content` text COMMENT '文章内容(html)',
  `create_time` datetime NOT NULL DEFAULT '1970-01-01 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_wiki_id` (`wiki_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='wiki文章内容表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wiki_content`
--

LOCK TABLES `wiki_content` WRITE;
/*!40000 ALTER TABLE `wiki_content` DISABLE KEYS */;
INSERT INTO `wiki_content` VALUES (1,100036031,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <p>\n  反欺诈通知风控接口\n </p>\n <p>\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=82161939\" rel=\"nofollow\">\n   http://wiki.corp.qunar.com/pages/viewpage.action?pageId=82161939\n  </a>\n </p>\n <p>\n  用户账户查询接口\n </p>\n <p>\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=55541128\" rel=\"nofollow\">\n   http://wiki.corp.qunar.com/pages/viewpage.action?pageId=55541128\n  </a>\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(2,97131509,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <p>\n  argus系统中的点评反作弊查询是一种事后查询的手段。\n </p>\n <p>\n  更详细的comments表结构：\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=65668187\" rel=\"nofollow\">\n   http://wiki.corp.qunar.com/pages/viewpage.action?pageId=65668187\n  </a>\n </p>\n <p>\n  comments表结构：\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> CREATE TABLE `comments` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT \'点评id\',\n  `customer` varchar(50) CHARACTER SET utf8 NOT NULL COMMENT \'点评作者\',\n  `ip` bigint(20) NOT NULL COMMENT \'点评作者IP\',\n  `status` tinyint(4) NOT NULL DEFAULT \'0\' COMMENT \'点评状态：0新评论，1审核中，2通过，3不通过，4用户删除，5系统删除，6审前私密，7审后私密\',\n  `cretime` datetime NOT NULL COMMENT \'点评发表时间\',\n  `type` tinyint(4) NOT NULL DEFAULT \'0\' COMMENT \'点评类型\',\n  `rid` bigint(20) NOT NULL COMMENT \'评论根点评id\',\n  `pid` bigint(20) NOT NULL COMMENT \'评论直接上级id\',\n  `ext1` bigint(20) NOT NULL DEFAULT \'0\' COMMENT \'扩展字段1\',\n  `ext2` varchar(100) CHARACTER SET utf8 NOT NULL COMMENT \'评论来源：www, android, iphone, sms等\',\n  `ext3` varchar(100) CHARACTER SET utf8 NOT NULL COMMENT \'订单id\',\n  `ext4` varchar(100) CHARACTER SET utf8 NOT NULL COMMENT \'扩展字段4\',\n  `modtime` datetime NOT NULL COMMENT \'点评修改时间\',\n  `appid` <span class=\"code-object\">int</span>(11) NOT NULL COMMENT \'应用id\',\n  `cityurl` varchar(80) CHARACTER SET utf8 NOT NULL COMMENT \'所属城市\',\n  `needsync` tinyint(1) NOT NULL COMMENT \'审核后台同步标识\',\n  `parent_fid` bigint(20) NOT NULL COMMENT \'图片评论的图片id\',\n  `obj_seq` varchar(30) CHARACTER SET utf8 NOT NULL COMMENT \'业务seq, 比如酒店hotel_seq\',\n  `rank` <span class=\"code-object\">float</span> NOT NULL DEFAULT \'-999.999\' COMMENT \'点评rank\',\n  `is_owner` tinyint(4) NOT NULL DEFAULT \'0\' COMMENT \'是否是酒店业主的回复\',\n  `title` varchar(255) NOT NULL DEFAULT \'\' COMMENT \'点评标题\',\n  `contenttype` tinyint(4) NOT NULL DEFAULT \'0\' COMMENT \' 点评内容类型\',\n  `ext5` <span class=\"code-object\">int</span>(11) NOT NULL DEFAULT \'0\' COMMENT \'评分，1-5\',\n  `ext6` varchar(100) CHARACTER SET utf8 NOT NULL DEFAULT \'\' COMMENT \'扩展字段6\',\n  `touch_rank` <span class=\"code-object\">float</span> NOT NULL DEFAULT \'-1100\' COMMENT \'用于touch中按rank排序\',\n  PRIMARY KEY (`id`),\n  KEY `idx_cust` (`customer`),\n  KEY `idx_pid` (`pid`),\n  KEY `idx_rid` (`rid`),\n  KEY `idx_city` (`cityurl`(15)),\n  KEY `idx_cre` (`cretime`),\n  KEY `idx_mod` (`modtime`),\n  KEY `idx_ext1` (`ext1`),\n  KEY `idx_ext3` (`ext3`),\n  KEY `idx_seq_pid` (`obj_seq`,`pid`),\n  KEY `idx_ip` (`ip`)\n) ENGINE=InnoDB AUTO_INCREMENT=86170661 DEFAULT CHARSET=utf8mb4 COMMENT=\'点评索引表\'\n</pre>\n  </div>\n </div>\n <p>\n  主要用到的字段：\n </p>\n <p>\n  id, customer, ip, status, cretime, type, pid , ext2, ext3, ext5, appid, obj_seq\n </p>\n <h3>\n  <a name=\"%E7%82%B9%E8%AF%84%E5%8F%8D%E4%BD%9C%E5%BC%8A-%E6%89%80%E9%9C%80%E6%95%B0%E6%8D%AE%E8%A1%A8%EF%BC%9A\">\n  </a>\n  所需数据表：\n </h3>\n <p>\n  comments表，hotelinfo表\n </p>\n <p>\n  用户中心user表\n </p>\n <p>\n  ugc黑名单酒店cheating_hotels表\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> CREATE TABLE `hotelinfo` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT \'主键id\',\n  `seq` varchar(100) NOT NULL COMMENT \'酒店seq\',\n  `name` varchar(500) NOT NULL COMMENT \'酒店名称\',\n  `address` varchar(500) NOT NULL COMMENT \'酒店地址\',\n  `type` varchar(500) DEFAULT NULL COMMENT \'酒店类型\',\n  `imageid` varchar(100) DEFAULT NULL COMMENT \'酒店头图\',\n  `citycode` varchar(100) NOT NULL COMMENT \'酒店所在城市citycode\',\n  `citytag` varchar(500) DEFAULT NULL COMMENT \'酒店所在城市citytag\',\n  `area` varchar(100) DEFAULT NULL COMMENT \'所在区域\',\n  `trarea` varchar(100) DEFAULT NULL COMMENT \'所在商圈\',\n  `onsent` text COMMENT \'酒店一句话描述\',\n  `grade` tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'酒店星级档次\',\n  `country` varchar(100) NOT NULL DEFAULT \'\' COMMENT \'国家\',\n  `baidupoint` varchar(50) NOT NULL DEFAULT \'\' COMMENT \'百度坐标\',\n  `googlepoint` varchar(50) NOT NULL DEFAULT \'\' COMMENT \'谷歌坐标\',\n  `star` tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'酒店星级\',\n  `ext1` text COMMENT \'酒店扩展信息\',\n  `sina_weibo` varchar(100) NOT NULL DEFAULT \'\' COMMENT \'酒店官方新浪微博\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_seq` (`seq`),\n  KEY `idx_citycode` (`citycode`),\n  KEY `idx_name` (`name`(255))\n) ENGINE=InnoDB AUTO_INCREMENT=103066652 DEFAULT CHARSET=utf8 COMMENT=\'酒店信息表\'\n</pre>\n  </div>\n </div>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> CREATE TABLE `user` (\n  `uid` <span class=\"code-object\">int</span>(10) unsigned NOT NULL AUTO_INCREMENT,\n  `username` <span class=\"code-object\">char</span>(32) NOT NULL DEFAULT \'\',\n  `mobile` <span class=\"code-object\">char</span>(32) NOT NULL DEFAULT \'\',\n  `password` varchar(100) NOT NULL,\n  `status` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `type` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `mobile_verified` tinyint(3) unsigned NOT NULL DEFAULT \'0\',\n  `regip` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `regtime` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `loginip` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `logintime` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `appFlag` <span class=\"code-object\">int</span>(10) unsigned NOT NULL DEFAULT \'0\',\n  `email` <span class=\"code-object\">char</span>(100) NOT NULL DEFAULT \'\',\n  `email_verified` tinyint(3) unsigned NOT NULL DEFAULT \'0\',\n  `quickflag` tinyint(3) NOT NULL DEFAULT \'0\',\n  `credit` tinyint(3) DEFAULT \'0\',\n  `security_notice_verified` tinyint(4) DEFAULT \'0\' COMMENT \'用户安全提醒设置：0, 未设置, 1,已设置 \',\n  `security_question_verified` tinyint(4) DEFAULT \'0\' COMMENT \'密保问题标示：0, 未设置, 1,已设置\',\n  `pwd_strength` <span class=\"code-object\">int</span>(11) DEFAULT \'0\' COMMENT \'密码强度分数\',\n  `pwd_type` tinyint(4) NOT NULL DEFAULT \'1\' COMMENT \'用户持有的密码类型记录\',\n  `prenum` varchar(10) NOT NULL DEFAULT \'86\' COMMENT \'手机区位码\',\n  `mobile_encrypt` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT \'\' COMMENT \'加密手机号\',\n  `email_encrypt` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT \'\' COMMENT \'加密邮箱\',\n  `last_update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \'最后更新时间\',\n  `loginname` varchar(32) NOT NULL DEFAULT \'\' COMMENT \'用户登录名\',\n  PRIMARY KEY (`uid`),\n  UNIQUE KEY `username` (`username`),\n  UNIQUE KEY `uniq_loginname` (`loginname`),\n  KEY `regtime` (`regtime`,`logintime`,`status`,`uid`),\n  KEY `mobile` (`mobile`),\n  KEY `email` (`email`),\n  KEY `idx_mobile_encrypt` (`mobile_encrypt`),\n  KEY `idx_email_encrypt` (`email_encrypt`),\n  KEY `idx_last_update_time` (`last_update_time`)\n) ENGINE=InnoDB AUTO_INCREMENT=208226449 DEFAULT CHARSET=utf8\n</pre>\n  </div>\n </div>\n <p>\n  。\n </p>\n <h3>\n  <a name=\"%E7%82%B9%E8%AF%84%E5%8F%8D%E4%BD%9C%E5%BC%8A-%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87%EF%BC%9A\">\n  </a>\n  数据准备：\n </h3>\n <p>\n  set_hotel_review_info(id, o)\n  <br/>\n  根据一个点评ID，获取hotel_seq\n  <br/>\n  根据hotel_seq获取酒店的相关信息，获取酒店的所有点评id_info\n  <br/>\n  根据这些点评获取点评的所有用户名，根据用户名获取每个用户所有点评的酒店seq和点评条数\n </p>\n <p>\n  set_user_info(o)\n  <br/>\n  根据上面得到的用户名，获得所有用户的详细信息：手机号，注册ip，注册时间，email\n </p>\n <p>\n  set_ip_region_info(o)\n  <br/>\n  设置所有评论ip和用户注册ip的归属地\n </p>\n <p>\n  set_other_info(o)\n  <br/>\n  设置评论注册时间差，用户手机归属地，酒店国家、省份、城市\n </p>\n <p>\n  set_ugc_audit_info(o)\n  <br/>\n  获得黑名单酒店信息\n  <br/>\n  设置每个用户的信息，所有点评中设置酒店是否在黑名单hl.seq.c，用户点评总数a_co_n，点评黑名单酒店数u_c_h_n，点评非黑名单酒店数c_h_n\n </p>\n <p>\n  set_rules_map_info(o)\n  <br/>\n  设置所有规则信息\n </p>\n <h3>\n  <a name=\"%E7%82%B9%E8%AF%84%E5%8F%8D%E4%BD%9C%E5%BC%8A-%E8%A7%84%E5%88%99%E6%A3%80%E6%9F%A5%EF%BC%9A\">\n  </a>\n  规则检查：\n </h3>\n <p>\n  check_rules(o)\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(3,99769907,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <h3>\n  <a name=\"qta%E8%AE%A2%E5%8D%95%E5%90%8C%E6%AD%A5-%E4%B8%80%E3%80%81%E6%AF%8F%E5%8D%81%E5%88%86%E9%92%9F%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%90%8C%E6%AD%A5\">\n  </a>\n  一、每十分钟执行一次同步\n </h3>\n <p>\n  <b>\n   def sync_update_order(sdt, edt)\n  </b>\n  <br/>\n  s1、从mysql_qta_stats的order_index表里获取订单的基本信息，计算间夜数等\n  <br/>\n  s2、从cpc订单库中获取无线端下单的gid等信息（mysql_cpc库mppb_order表）\n  <br/>\n  s3、get_detail(id_order_map)获取订单的详情信息\n  <br/>\n  s4、组合订单的基本信息和订单的详情信息update_index_detail(id_order_map, id_detail_map)\n  <br/>\n  s5、订单数据插入到数据库中persistent(id_order_map.values())\n </p>\n <p>\n  <b>\n   def get_detail(id_order_map)\n  </b>\n  <br/>\n  s1、获取所有订单的id集合\n  <br/>\n  s2、get_detail_by_ids(list(ids_set))\n  <br/>\n  s3、返回{订单号: 订单详情,}的dict\n </p>\n <p>\n  <b>\n   def get_detail_by_ids(order_ids_list)\n  </b>\n  <br/>\n  s1、detail表的配置信息，有切表的情况发生，需注意\n  <br/>\n  s2、根据订单id算出日期时间戳，构成{时间戳:[订单号,],}的dict结构\n </p>\n <p>\n  s3、根据时间戳查询订单数据分库分表映射表(mysql_qta_detail, order_shard_mapper),确定库和表路径\n  <br/>\n  s4、加载数据库配置文件链接数据库，确定订单详情表名，分段查询订单详情数据\n  <br/>\n  s5、如果查询出的订单量不一致，找出在order_detail中不存在的订单，打警告日志\n  <br/>\n  s6、对查询出来的订单详情json格式，提取数据合并detail的json和order_index中的信息，并作一些判断 extract_detail(order_detail)\n  <br/>\n  s7、返回{订单号: 订单详情, }的dict\n </p>\n <p>\n  <b>\n   def extract_detail(order_detail)\n  </b>\n  <br/>\n  s1、在大json中提取各种订单相关信息\n  <br/>\n  s2、返回一个订单的订单详情\n  <br/>\n  <b>\n   def update_index_detail(id_order_map, id_detail_map)\n  </b>\n  <br/>\n  s1、组合订单的基本信息和订单的详情信息\n  <br/>\n  s2、返回合并之后的订单数据\n  <br/>\n  <b>\n   def persistent(id_order_map.values())\n  </b>\n  <br/>\n  s1、构造动态sql，批量插入\n  <br/>\n  s2、根据有无订单详情分组\n </p>\n <h3>\n  <a name=\"qta%E8%AE%A2%E5%8D%95%E5%90%8C%E6%AD%A5-%E4%BA%8C%E3%80%81%E6%AF%8F%E5%B0%8F%E6%97%B6%E7%AC%AC35%E5%88%86%E9%92%9F%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%9F%A5%E6%BC%8F\">\n  </a>\n  二、每小时第35分钟进行一次查漏\n </h3>\n <p>\n  <b>\n   def sync_diff_order_by_day(date)\n  </b>\n  <br/>\n  s1、查询一个小时之前到现在的order_index表里所有订单的基本信息id_order_map\n  <br/>\n  s2、查询一个小时之前到现在的qta_order表里具有详细信息的订单号\n  <br/>\n  s3、删除id_order_map中在s2步中查到的订单，得到需要同步的订单\n  <br/>\n  s4、从cpc订单库中获取无线端下单的gid等信息\n  <br/>\n  s5、根据订单id获取订单的详情信息get_detail_by_ids(id_order_map.keys())\n  <br/>\n  s6、合并订单基本信息和详情信息\n  <br/>\n  s7、将订单数据存储到数据库中\n </p>\n <h3>\n  <a name=\"qta%E8%AE%A2%E5%8D%95%E5%90%8C%E6%AD%A5-%E4%B8%89%E3%80%81%E6%AF%8F%E5%B0%8F%E6%97%B6%E5%90%8C%E6%AD%A5%E4%B8%80%E6%AC%A1wap%E6%95%B0%E6%8D%AE\">\n  </a>\n  三、每小时同步一次wap数据\n </h3>\n <p>\n  该程序不新插入记录，因为新插入记录会破坏从qta的stats中同步数据的逻辑，使两个同步程序紧耦合\n  <br/>\n  <b>\n   def sync_wap(primary_id = None, create_dt = None)\n  </b>\n  <br/>\n  s1、从无线端拿到订单设备数据\n  <br/>\n  s2、根据上步的订单号取得qta里的数据\n  <br/>\n  s3、更新上步获取的qta订单的设备数据\n </p>\n <h3>\n  <a name=\"qta%E8%AE%A2%E5%8D%95%E5%90%8C%E6%AD%A5-%E5%9B%9B%E3%80%81%E5%85%B6%E4%BB%96\">\n  </a>\n  四、其他\n </h3>\n <p>\n  一次性同步所有的订单，使用diff差异同步，先从detail中取需要同步的所有日期\n  <br/>\n  <b>\n   def sync_all_order(nthread = 5)\n  </b>\n  <br/>\n  同步一天的所有订单\n  <br/>\n  <b>\n   def sync_all_order_by_day(date)\n  </b>\n  <br/>\n  <b>\n   def get_all_order_by_day(date)\n  </b>\n  <br/>\n  根据订单号来同步数据\n  <br/>\n  <b>\n   def sync_by_order_ids(order_ids)\n  </b>\n </p>\n <h4>\n  <a name=\"qta%E8%AE%A2%E5%8D%95%E5%90%8C%E6%AD%A5-%E4%B8%BB%E8%A6%81%E6%B6%89%E5%8F%8A%E7%9A%84%E8%A1%A8%E7%BB%93%E6%9E%84\">\n  </a>\n  主要涉及的表结构\n </h4>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\">CREATE TABLE `order_shard_mapper` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增主键\',\n  `day` timestamp NOT NULL DEFAULT \'0000-00-00 00:00:00\' COMMENT \'映射 的日期\',\n  `database_path` varchar(50) NOT NULL COMMENT \'映射到的数据库名\',\n  `table_path` varchar(30) NOT NULL COMMENT \'映射到的表明\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_day` (`day`),\n  KEY `idx_database_path_table_path` (`database_path`,`table_path`)\n) ENGINE=InnoDB AUTO_INCREMENT=3064 DEFAULT CHARSET=utf8 COMMENT=\'订单数据分库分表映射\'\n</pre>\n  </div>\n </div>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\">CREATE TABLE `order_detail_23` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增主键\',\n  `order_id` bigint(20) NOT NULL COMMENT \'订单id\',\n  `version` <span class=\"code-object\">int</span>(11) NOT NULL COMMENT \'更新时的版本号\',\n  `section` varchar(16) NOT NULL COMMENT \'订单详情type,区分不同模块数据\',\n  `data` text NOT NULL COMMENT \'订单详情数据\',\n  `create_date` datetime NOT NULL COMMENT \'创建时间\',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \'更新时间\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_order_id_type` (`order_id`,`section`)\n) ENGINE=InnoDB AUTO_INCREMENT=9328245 DEFAULT CHARSET=utf8mb4 COMMENT=\'订单详情信息表\'\n</pre>\n  </div>\n </div>\n <p>\n  +---------------+\n  <br/>\n  | section       |\n  <br/>\n  +---------------+\n  <br/>\n  | audit-order   |\n  <br/>\n  | confirm-order |\n  <br/>\n  | main-order    |\n  <br/>\n  | notify-fax    |\n  <br/>\n  | order-product |\n  <br/>\n  | pay-order     |\n  <br/>\n  +---------------+\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(4,100794613,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <p>\n  qta联系人：\n  <font color=\"#90a5f6\">\n   杨昆ken\n  </font>\n  <font color=\"#666666\">\n   (\n  </font>\n  <font color=\"#0000ff\">\n   <ins>\n    ken.yang\n   </ins>\n  </font>\n  <font color=\"#666666\">\n   )\n  </font>\n </p>\n <p>\n  qta orderstore线上数据库和离线库\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=76817591\" rel=\"nofollow\">\n   http://wiki.corp.qunar.com/pages/viewpage.action?pageId=76817591\n  </a>\n </p>\n <p>\n  订单存储重构支持矩阵数据库存储\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=99750262\" rel=\"nofollow\">\n   http://wiki.corp.qunar.com/pages/viewpage.action?pageId=99750262\n  </a>\n </p>\n <p>\n  2015年12月30日24点开始启用新算法，2016年1月1日0点开始订单开始存储到矩阵数据库中\n </p>\n <blockquote>\n  <p>\n   又到了切换新的qta订单库的时候了。因为频繁的切换新数据带来了很多不方便，因此真对这个问题我们这次提出了新的方案。\n   <br/>\n   此方案堪称一劳永逸。以后再也不用切订单库了。\n   <br/>\n   1，新的方案将启用矩阵式订单库，一次上10组db。 每天的订单会均匀的插入到这10组db中。根据hash策略决定订单分配到那个db。\n   <br/>\n   2，老的数据库会进行兼容。新数据会存储到矩阵数据库中。\n   <br/>\n   3，订单的路由配置进行了细微的调整。以前是根据order_shard_mapper表根据day进行指向数据源和表。   但因为订单生成器的跳号原因，现在新的路由配置将day，变成了订单号的偏移量（这偏移量就是订单号的第3位到第6位，跟以前的day是一一对应关系 的）。新表叫order_route_config（兼容老数据）\n  </p>\n </blockquote>\n <p>\n  路由表：老表和新表对比\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> mysql&gt; select * from order_route limit 100;\n+-----+---------------+-------------------------+------------+\n| id  | order_id_step | database_names          | tab_suffix |\n+-----+---------------+-------------------------+------------+\n|   3 |           122 | defaultTargetDataSource | _01        |\n|   6 |           123 | defaultTargetDataSource | _01        |\n\n\nCreate Table: CREATE TABLE `order_route_config` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增主键\',\n  `order_id_step` <span class=\"code-object\">int</span>(11) unsigned NOT NULL COMMENT \'订单id偏移量\',\n  `database_names` varchar(256) NOT NULL COMMENT \'映射到的数据库名，支持多个，逗号分隔\',\n  `tab_suffix` varchar(30) NOT NULL COMMENT \'映射到的表名\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_order_id_step` (`order_id_step`)\n) ENGINE=InnoDB AUTO_INCREMENT=4891 DEFAULT CHARSET=utf8 COMMENT=\'订单数据分库分表映射\'\n\n\nmysql&gt; select * from order_shard_mapper limit 100;\n+-----+---------------------+-------------------------+------------+\n| id  | day                 | database_path           | table_path |\n+-----+---------------------+-------------------------+------------+\n|   1 | 2014-07-15 00:00:00 | defaultTargetDataSource | _01        |\n|   2 | 2014-07-16 00:00:00 | defaultTargetDataSource | _01        |\n\n\nCreate Table: CREATE TABLE `order_shard_mapper` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增主键\',\n  `day` timestamp NOT NULL DEFAULT \'0000-00-00 00:00:00\' COMMENT \'映射 的日期\',\n  `database_path` varchar(50) NOT NULL COMMENT \'映射到的数据库名\',\n  `table_path` varchar(30) NOT NULL COMMENT \'映射到的表明\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_day` (`day`),\n  KEY `idx_database_path_table_path` (`database_path`,`table_path`)\n) ENGINE=InnoDB AUTO_INCREMENT=3064 DEFAULT CHARSET=utf8 COMMENT=\'订单数据分库分表映射\'\n</pre>\n  </div>\n </div>\n <blockquote>\n  <p>\n   5，我们的设计wiki：\n   <span class=\"error\">\n    [http://wiki.corp.qunar.com/pages/viewpage.action?pageId=99750262|../../../../../../../../../pages/viewpage.action?pageId=99750262\\||]\n   </span>\n   <br/>\n   6，存储配置库已经移到新的namespace里了。\n   <br/>\n   namespace:qta_order\n   <br/>\n   db:qta_order_meta\n   <br/>\n   所有的具体离线库地址看我整理的wiki：\n   <span class=\"error\">\n    [http://wiki.corp.qunar.com/pages/viewpage.action?pageId=76817591|../../../../../../../../../pages/viewpage.action?pageId=76817591\\||]\n   </span>\n   <br/>\n   账号和权限跟qta_orderstore4都复制过去了。\n   <br/>\n   7，新的数据打算在\n   <font color=\"#ff2600\">\n    2015年12月30日0点启用。也就是下周二晚上12点。周三的凌晨0点。\n   </font>\n   <br/>\n   8，对了，我们新上了一套表，叫remark表。  这表是存储订单备注的，就是我可以随便往订单上加备注，比如一些ivr呼出信息，发优惠券信息等内容，因为这个不涉及订单的版本号更新，因此存储到这张表 里，这套表也进行了和订单一样的分表。有对此有需求的可以访问此套表。 他们是和订单表放一起的。\n   <br/>\n   在此周知大家。如果计划有变我会再通知大家。最后还有不明白的可以qtalk联系我。\n   <br/>\n   最新的orderstore完整订单库线上和离线库看我整理的wiki：\n   <span class=\"error\">\n    [http://wiki.corp.qunar.com/pages/viewpage.action?pageId=76817591|../../../../../../../../../pages/viewpage.action?pageId=76817591\\||]\n   </span>\n  </p>\n </blockquote>\n <p>\n  qta hash算法java实现逻辑：\n </p>\n <p>\n  <span class=\"image-wrap\" style=\"\">\n   <img src=\"/download/attachments/100794613/aaaaaa.jpg?version=1&amp;modificationDate=1451363327000\" style=\"border: 1px solid black\"/>\n  </span>\n  <br/>\n  <span class=\"image-wrap\" style=\"\">\n   <img src=\"/download/attachments/100794613/bbbbbbbbbbbbbbbbb.jpg?version=1&amp;modificationDate=1451363281000\" style=\"border: 1px solid black\"/>\n  </span>\n  <br/>\n  <span class=\"image-wrap\" style=\"\">\n   <img src=\"/download/attachments/100794613/qta_order_sync.jpg?version=1&amp;modificationDate=1451363090000\" style=\"border: 1px solid black\"/>\n  </span>\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(5,97131505,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <p>\n  argus\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(6,100039275,'<div class=\"wiki-content\">\n <!-- wiki content -->\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(7,100039273,'<div class=\"wiki-content\">\n <!-- wiki content -->\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(8,100248367,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <h3>\n  <a name=\"%E9%85%92%E5%BA%97%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%AE%A1%E7%90%86-%E5%8A%9F%E8%83%BD%E7%AE%80%E4%BB%8B\">\n  </a>\n  功能简介\n </h3>\n <p>\n  主要功能是对酒店进行加黑、解黑管理\n </p>\n <p>\n  输入hotel_seq，系统会自动转换成hotel_id后调用业务线接口进行加黑操作；\n </p>\n <p>\n  由于hotel_seq --&gt; hotel_id是一对多的关系，入库的数量可能大于传入的hotel_seq数量。\n </p>\n <blockquote>\n </blockquote>\n <h3>\n  <a name=\"%E9%85%92%E5%BA%97%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%AE%A1%E7%90%86-%E6%8E%A5%E5%8F%A3%E4%BB%8B%E7%BB%8D\">\n  </a>\n  接口介绍\n </h3>\n <h4>\n  <a name=\"%E9%85%92%E5%BA%97%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%AE%A1%E7%90%86-1%E3%80%81%E5%9C%B0%E5%9D%80\">\n  </a>\n  1、地址\n </h4>\n <p>\n  业务线没有提供接口调用详情，只有一个\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=77929475\" rel=\"nofollow\">\n   接口简单介绍\n  </a>\n  ，另外可以在wiki上搜到\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=65667567\" rel=\"nofollow\">\n   一个地址\n  </a>\n  ，对接口调用参数和返回数据结构有些帮助\n </p>\n <p>\n  argus系统对此接口进行了封装，对内的接口介绍可以\n  <a class=\"external-link\" href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=71935618\" rel=\"nofollow\">\n   参考这里\n  </a>\n </p>\n <h4>\n  <a name=\"%E9%85%92%E5%BA%97%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%AE%A1%E7%90%86-2%E3%80%81%E6%B5%8B%E8%AF%95\">\n  </a>\n  2、测试\n </h4>\n <p>\n  host: qta\n </p>\n <p>\n  线上测试可以使用测试hotel_seq是：test_only_8\n </p>\n <p>\n  （1）加黑接口： /baseinfo/api/platform/sHotelBlackWhiteList/insertArrearsHotels\n </p>\n <p>\n  返回数据结构例如：\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> {<span class=\"code-quote\">\"ret\"</span>: <span class=\"code-keyword\">true</span>, <span class=\"code-quote\">\"data\"</span>: <span class=\"code-keyword\">null</span>, <span class=\"code-quote\">\"errcode\"</span>: 1, <span class=\"code-quote\">\"errmsg\"</span>: <span class=\"code-keyword\">true</span>}\n</pre>\n  </div>\n </div>\n <p>\n  加黑成功可能返回：\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> {<span class=\"code-quote\">\"ret\"</span>: <span class=\"code-keyword\">true</span>, <span class=\"code-quote\">\"data\"</span>: 1, <span class=\"code-quote\">\"errcode\"</span>: 0}\n</pre>\n  </div>\n </div>\n <p>\n  data是插入的数量；errcode是错误码，为0表示正确；errmsg是错误时的错误信息\n </p>\n <p>\n  （2）解黑接口：/baseinfo/api/platform/sHotelBlackWhiteList/deleteArrearsHotels\n </p>\n <p>\n  返回数据结构和加黑接口类似\n </p>\n <p>\n  （3）查询接口：/baseinfo/api/sHotelBlackWhiteList/search\n </p>\n <p>\n  返回数据结构例如：\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> {\n  <span class=\"code-quote\">\"status\"</span>: 0,\n  <span class=\"code-quote\">\"msg\"</span>: <span class=\"code-keyword\">null</span>,\n  <span class=\"code-quote\">\"data\"</span>: [\n    {\n      <span class=\"code-quote\">\"remark\"</span>: <span class=\"code-quote\">\"shicheng.zhang\"</span>,\n      <span class=\"code-quote\">\"subTypesStr\"</span>: <span class=\"code-quote\">\"现返欠款\"</span>,\n      <span class=\"code-quote\">\"level\"</span>: 0,\n      <span class=\"code-quote\">\"bizType\"</span>: \"\",\n      <span class=\"code-quote\">\"sHotelId\"</span>: 536188,\n      <span class=\"code-quote\">\"payType\"</span>: \"\",\n      <span class=\"code-quote\">\"updateTime\"</span>: <span class=\"code-quote\">\"2015-12-10 19:24:53\"</span>,\n      <span class=\"code-quote\">\"createTime\"</span>: <span class=\"code-quote\">\"2015-12-10 19:24:53\"</span>,\n      <span class=\"code-quote\">\"subType\"</span>: <span class=\"code-quote\">\"cash_pay_arrears\"</span>,\n      <span class=\"code-quote\">\"hotelSeq\"</span>: <span class=\"code-quote\">\"test_only_8\"</span>,\n      <span class=\"code-quote\">\"type\"</span>: <span class=\"code-quote\">\"cash_pay_arrears\"</span>,\n      <span class=\"code-quote\">\"id\"</span>: 1519403\n    }\n  ],\n  <span class=\"code-quote\">\"ret\"</span>: <span class=\"code-keyword\">true</span>\n}\n</pre>\n  </div>\n </div>\n <h3>\n  <a name=\"%E9%85%92%E5%BA%97%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%AE%A1%E7%90%86-%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91\">\n  </a>\n  代码逻辑\n </h3>\n <p>\n  目前感觉代码中有些地方比较奇怪，接口提供方的主要联系人已经离职了，目前也不知道该和谁联系一下确定接口中感觉迷惑的地方，暂时就先这样吧。\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(9,100248364,'<div class=\"wiki-content\">\n <!-- wiki content -->\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40'),(10,98578544,'<div class=\"wiki-content\">\n <!-- wiki content -->\n <p>\n  <b>\n   报警邮件：\n  </b>\n </p>\n <blockquote>\n  <p>\n   [报警] qta最近一小时订单同步异常\n  </p>\n  <p>\n   qta订单同步异常, 2015-10-27 14:00-15:00订单减少比率为 0.55, 阈值为: 0.25\n  </p>\n  <p>\n   最近7天和今天14:00-15:00的订单量分别为：[10789, 10982, 11388, 12766, 12292, 8666, 10105, 5005]\n  </p>\n </blockquote>\n <p>\n  去查看是否同步出错，还是订单量确实减少？\n </p>\n <p>\n  源数据库： [mysql_qta_stats]\n </p>\n <p>\n  mysql -h -u -p -P3318 -Dqta_stats\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> select count(*) from order_index where create_date &gt;= \'2015-10-27 14:00:00\' and create_date &lt; \'2015-10-27 15:00:00\';\n</pre>\n  </div>\n </div>\n <p>\n  查看源数据表中的订单数量\n </p>\n <p>\n  同步数据库：[mysql_argusdb2_qta_read]\n </p>\n <p>\n  mysql -h -u r -p -Dargus\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> select count(*) from qta_order where create_datetime &gt;= \'2015-10-27 14:00:00\' and create_datetime &lt; \'2015-10-27 15:00:00\';\n</pre>\n  </div>\n </div>\n <p>\n  查看同步数据库中订单数量\n </p>\n <p>\n  看两个数据库表中的订单数量是否一致\n </p>\n <p>\n  <b>\n   特殊情况：\n  </b>\n </p>\n <p>\n  （1）同步数据库中的数量比源数据库中少，同步看似出现问题，但如果1个小时后再查询一次可能数据就恢复正常了，这是因为同步机制会去校验，如果同步少了，会再到源库中拿到数据补回来。\n </p>\n <p>\n  （2）同步的逻辑实际上是\n  <b>\n   监控的从库的同步订单表\n  </b>\n  ，有时候会出现\n  <b>\n   从库挂掉\n  </b>\n  的情况，这个时候到主库和从库都去检查一下，可能主库上数据是同步没问题的。主库是这个的配置：[mysql_argusdb2_qta]。如果确定主库没有问题，可以联系DBA查看从库状态并解决。\n </p>\n <p>\n  从库挂掉一般是从库同步主库的数据延时高，报警邮件的现象可能是第一个小时会出现订单量减少，过段时间后去select count会发现订单量比报警时的多了一些，但是下一个小时开始可能同步量就变为0了。\n </p>\n <h3>\n  <a name=\"qta%E5%90%8C%E6%AD%A5%E7%9B%91%E6%8E%A7%E6%8A%A5%E8%AD%A6%E5%A4%84%E7%90%86-%E9%87%8D%E7%82%B9%E5%85%B3%E6%B3%A8%7B%7D%7B%7D%E6%8A%A5%E8%AD%A6%E9%82%AE%E4%BB%B6\">\n  </a>\n  <b>\n   重点关注\n  </b>\n  <b>\n   报警邮件\n  </b>\n </h3>\n <blockquote>\n  <p>\n   <em>\n    [报警] qta最近一小时订单同步异常\n   </em>\n  </p>\n  <p>\n   qta订单同步异常, 2015-10-30 00:00-01:00订单减少比率为 1.0, 阈值为: 0.25\n  </p>\n  <p>\n   最近7天和今天00:00-01:00的订单量分别为：[5430, 5970, 4548, 3445, 3957, 4266, 4563, 0]\n  </p>\n </blockquote>\n <p>\n  可以看出同步数量为0，分别到主、从库查看同步情况，都没有同步成功。同步源库的数据表中是有数据的。这时候需要考虑是否有\n  <b>\n   数据库源更换的情况没有通知到我们\n  </b>\n  。\n </p>\n <p>\n  qta订单同步是定时任务，每10分钟执行一次，脚本文件是 argus/jobs/qta/sync_update_10min.sh\n </p>\n <p>\n  可以先查看定时任务是否执行过：\n </p>\n <p>\n  到argus1机器上去，执行 sudo cat /var/log/cron | grep sync_update_10min 查看 这个脚本的执行情况，日志中可能显示脚本定时都执行过了，但是其实如果执行过程中报错了，这里是没有记录的。所以这里只是说脚本执行过了，但不保证执行正确。\n </p>\n <p>\n  然后可以手动执行一下这个任务，如果发现类似下面的错误：\n </p>\n <blockquote>\n  <p>\n   Traceback (most recent call last):\n   <br/>\n   File \"/home/q/python27/lib/python2.7/runpy.py\", line 162, in _run_module_as_main\n   <br/>\n   \"_\n   <em>\n    main\n   </em>\n   _\", fname, loader, pkg_name)\n   <br/>\n   File \"/home/q/python27/lib/python2.7/runpy.py\", line 72, in _run_code\n   <br/>\n   exec code in run_globals\n   <br/>\n   File \"/home/q/argus/shicheng.zhang/argus/biz/qta/sync.py\", line 695, in &lt;module&gt;\n   <br/>\n   sync_update_order(sdt, edt)\n   <br/>\n   File \"/home/q/argus/shicheng.zhang/argus/biz/qta/sync.py\", line 493, in sync_update_order\n   <br/>\n   id_detail_map = get_detail(id_order_map)\n   <br/>\n   File \"/home/q/argus/shicheng.zhang/argus/biz/qta/sync.py\", line 76, in get_detail\n   <br/>\n   id_detail_map.update(get_detail_by_ids(list(ids_set)))\n   <br/>\n   File \"/home/q/argus/shicheng.zhang/argus/biz/qta/sync.py\", line 104, in get_detail_by_ids\n   <br/>\n   conn = MySQLdb.connect(**jcutil.get_mysql_config(db_config_map[db_path]))\n   <br/>\n   KeyError: u\'defaultTargetDataSource5\'\n  </p>\n </blockquote>\n <p>\n  那么可以确定确实发生了切库，下面是解决方案：\n </p>\n <p>\n  错误信息已定位同步文件的行号，错误原因是错误的key：\n  <em>\n   defaultTargetDataSource5\n  </em>\n </p>\n <p>\n  <em>\n   db_config_map是一个map，取key值\n  </em>\n  db_path的时候报错，db_path的值来源于上一行代码： db_path, table_path = data\n </p>\n <p>\n  定位到data的取值来源，是查一个数据表 order_shard_mapper的两个字段：\n </p>\n <p>\n  可以去看一下这个表的定义，是一个分库分表的映射\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> CREATE TABLE `order_shard_mapper` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增主键\',\n  `day` timestamp NOT NULL DEFAULT \'0000-00-00 00:00:00\' COMMENT \'映射 的日期\',\n  `database_path` varchar(50) NOT NULL COMMENT \'映射到的数据库名\',\n  `table_path` varchar(30) NOT NULL COMMENT \'映射到的表明\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uniq_day` (`day`),\n  KEY `idx_database_path_table_path` (`database_path`,`table_path`)\n) ENGINE=InnoDB AUTO_INCREMENT=3064 DEFAULT CHARSET=utf8 COMMENT=\'订单数据分库分表映射\'\n</pre>\n  </div>\n </div>\n <p>\n  再看一下里面的数据：\n </p>\n <p>\n  3003 | 2017-04-19 00:00:00 | defaultTargetDataSource5 | _49\n </p>\n <p>\n  key  defaultTargetDataSource5 的来源已经确定了\n </p>\n <p>\n  说明订单数据库发生了切换，但没有通知到我们，同步程序找不到数据源导致同步失败。接下来，可以在我们的程序中添加这个新数据源。\n </p>\n <p>\n  数据源配置在哪？可以找DBA问一下，今天找的是 zhufeng.wang 王竹峰\n </p>\n <p>\n  然后在sync.py中的get_detail_by_ids代码中更新db_config_map的值。例如，添加一个新的key - value映射为\n  <font color=\"#c41a16\">\n   \'defaultTargetDataSource5\'\n  </font>\n  <font color=\"#000000\">\n   :\n  </font>\n  <font color=\"#c41a16\">\n   \'mysql_qta_detail4\'\n  </font>\n  <font color=\"#000000\">\n   ,\n  </font>\n </p>\n <p>\n  然后更新prod/config.ini的数据源配置，添加一个新的，例如：\n </p>\n <div class=\"code panel\" style=\"border-width: 1px;\">\n  <div class=\"codeContent panelContent\">\n   <pre class=\"code-java\"> [mysql_qta_detail4]\nhost = xxxx\nuser = xxxx\nport = 3306\npasswd = xxxxxx\ncharset = utf8\ndb = xxxx\n</pre>\n  </div>\n </div>\n <p>\n  注意\n  <font color=\"#c41a16\">\n   defaultTargetDataSource5 和\n  </font>\n  <font color=\"#c41a16\">\n   mysql_qta_detail4 ，这两个关键字的对应关系\n  </font>\n </p>\n <p>\n  更新完毕之后测试发布上线\n </p>\n <p>\n  这个问题是因为发生了切库但没有通知到我们造成的，类似的通知邮件如下：\n </p>\n <p>\n  <span class=\"image-wrap\" style=\"\">\n   <img src=\"/download/attachments/98578544/syncemail.png?version=2&amp;modificationDate=1446202550000\" style=\"border: 1px solid black\"/>\n  </span>\n </p>\n</div>\n','2017-03-12 22:11:40','2017-03-12 14:11:40');
/*!40000 ALTER TABLE `wiki_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wiki_img_src`
--

DROP TABLE IF EXISTS `wiki_img_src`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wiki_img_src` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `wiki_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'wiki id',
  `img_src` varchar(255) NOT NULL DEFAULT '' COMMENT 'wiki中img路径',
  `create_time` datetime NOT NULL DEFAULT '1970-01-01 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  KEY `idx_wiki_id` (`wiki_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='wiki中img路径表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wiki_img_src`
--

LOCK TABLES `wiki_img_src` WRITE;
/*!40000 ALTER TABLE `wiki_img_src` DISABLE KEYS */;
/*!40000 ALTER TABLE `wiki_img_src` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-03-13 17:11:45
